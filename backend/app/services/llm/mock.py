"""Development-friendly mock LLM client."""

from __future__ import annotations

from backend.app.schemas import (
    ChapterConcept,
    LLMAnalysis,
    LLMChapter,
    LLMConcept,
    LLMRelationship,
    PaperRecord,
)

from .base import LLMClient


class MockLLMClient(LLMClient):
    """Simple deterministic client useful for tests and local development."""

    async def analyze(
        self, record: PaperRecord, *, pdf_path: str | None = None
    ) -> LLMAnalysis:
        concepts = [
            LLMConcept(name=tag, description=f"Concept derived from tag {tag}")
            for tag in record.tags[:5]
        ]
        relationships = [
            LLMRelationship(source=record.external_id, target=tag, relation="MENTIONS")
            for tag in record.tags[:5]
        ]
        summary = (
            record.abstract or f"Summary for {record.title} generated by Mock LLM."
        )
        key_points = [
            f"Title: {record.title}",
            f"Source: {record.source}",
            f"Authors: {', '.join(record.authors) if record.authors else 'Unknown'}",
        ]
        chapters: list[LLMChapter] = []
        if record.tags:
            for index, tag in enumerate(record.tags[:3], start=1):
                concept_ref = ChapterConcept(label=tag, node_type="Concept")
                chapters.append(
                    LLMChapter(
                        title=f"Section {index}: {tag}",
                        explanation=(
                            f"This section explains how the paper leverages {tag} within its methodology."
                        ),
                        related_concepts=[concept_ref],
                    )
                )
        else:
            chapters.append(
                LLMChapter(
                    title="Overview",
                    explanation=(
                        "A high-level overview generated by the mock client. Real LLMs will "
                        "provide richer chapter narratives."
                    ),
                    related_concepts=[],
                )
            )
        return LLMAnalysis(
            summary=summary,
            key_points=key_points,
            concepts=concepts,
            relationships=relationships,
            chapters=chapters,
        )
