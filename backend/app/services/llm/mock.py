"""Development-friendly mock LLM client."""

from __future__ import annotations

from backend.app.schemas import (
    ChapterConcept,
    LLMAnalysis,
    LLMChapter,
    LLMConcept,
    LLMRelationship,
    PaperRecord,
)

from .base import LLMClient


class MockLLMClient(LLMClient):
    """Simple deterministic client useful for tests and local development."""

    async def analyze(
        self, record: PaperRecord, *, pdf_path: str | None = None
    ) -> LLMAnalysis:
        concepts = [
            LLMConcept(name=tag, description=f"Concept derived from tag {tag}")
            for tag in record.tags[:5]
        ]
        relationships = [
            LLMRelationship(source=record.external_id, target=tag, relation="MENTIONS")
            for tag in record.tags[:5]
        ]
        summary = (
            record.abstract or f"Summary for {record.title} generated by Mock LLM."
        )
        key_points = [
            f"Title: {record.title}",
            f"Source: {record.source}",
            f"Authors: {', '.join(record.authors) if record.authors else 'Unknown'}",
        ]
        chapters: list[LLMChapter] = []
        if record.tags:
            for index, tag in enumerate(record.tags[:3], start=1):
                concept_ref = ChapterConcept(label=tag, node_type="Concept")
                explanation = (
                    f"The authors position {tag} as a central motif in their study, "
                    f"bridging prior literature with the contribution of {record.title}. "
                    f"They describe concrete design choices that operationalise {tag} "
                    "and discuss anticipated trade-offs the reader should be aware of.\n\n"
                    "Subsequent experiments revisit the concept through ablation-style "
                    "analysis, contrasting alternative baselines and reporting signal-to-"
                    "noise trade-offs that motivate future investigation."
                )
                chapters.append(
                    LLMChapter(
                        title=f"Section {index}: {tag}",
                        explanation=explanation,
                        related_concepts=[concept_ref],
                    )
                )
        else:
            chapters.append(
                LLMChapter(
                    title="Overview",
                    explanation=(
                        "A comprehensive overview generated by the mock client summarising "
                        "the paper's motivation, methodology, and expected impact. Real LLMs "
                        "replace this placeholder with chapter-specific narratives."
                    ),
                    related_concepts=[],
                )
            )
        return LLMAnalysis(
            summary=summary,
            key_points=key_points,
            concepts=concepts,
            relationships=relationships,
            chapters=chapters,
        )
